{"ast":null,"code":"import _classCallCheck from \"/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/src/Components/ThemeSwitcher/index.js\";\nimport React, { Component } from 'react';\n\nvar ThemeSwitcher =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ThemeSwitcher, _Component);\n\n  function ThemeSwitcher(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeSwitcher);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemeSwitcher).call(this, props));\n    _this.theme = _this.props.theme;\n    _this.updateTheme = _this.props.refresh;\n    return _this;\n  }\n\n  _createClass(ThemeSwitcher, [{\n    key: \"switchTheme\",\n    value: function switchTheme() {\n      var currTheme = this.theme;\n      var state;\n\n      if (currTheme === 'dark') {\n        state = {\n          theme: 'light'\n        };\n      } else {\n        state = {\n          theme: 'dark'\n        };\n      } // UPDATE CURRENT STATE OF APP TO OPPOSITE THEME\n\n\n      this.updateTheme(state);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // CREATES TOOL TIP TO TELL USERS WHICH THEME THEY WILL BE SWITCHING TO\n      var toolTip = function toolTip() {\n        var oppositeTheme = _this2.theme === 'dark' ? 'light' : 'dark';\n        var toolTip = React.createElement(\"div\", {\n          className: \"tool-tip\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"class-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, \"Switch to \", React.createElement(\"span\", {\n          className: oppositeTheme,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, oppositeTheme, \" \"), \"theme\"));\n        return toolTip;\n      };\n\n      var switchButton = this.theme === 'dark' ? React.createElement(\"button\", {\n        onClick: this.switchTheme.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, toolTip(), React.createElement(\"i\", {\n        className: \"fa fa-sun-o\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })) : React.createElement(\"button\", {\n        onClick: this.switchTheme.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, toolTip(), React.createElement(\"i\", {\n        className: \"fa fa-moon-o\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        id: \"switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, switchButton);\n    }\n  }]);\n\n  return ThemeSwitcher;\n}(Component);\n\nexport default ThemeSwitcher;","map":{"version":3,"sources":["/Users/Daniel_Giraldo/Web Apps/random code/JS/dgiraldo313.github.io/src/Components/ThemeSwitcher/index.js"],"names":["React","Component","ThemeSwitcher","props","theme","updateTheme","refresh","currTheme","state","toolTip","oppositeTheme","switchButton","switchTheme","bind"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,MAAKD,KAAL,CAAWC,KAAxB;AACA,UAAKC,WAAL,GAAmB,MAAKF,KAAL,CAAWG,OAA9B;AAHiB;AAKlB;;;;kCAEa;AACZ,UAAIC,SAAS,GAAG,KAAKH,KAArB;AACA,UAAII,KAAJ;;AACA,UAAID,SAAS,KAAK,MAAlB,EAA0B;AACxBC,QAAAA,KAAK,GAAG;AACNJ,UAAAA,KAAK,EAAE;AADD,SAAR;AAGD,OAJD,MAIO;AACLI,QAAAA,KAAK,GAAG;AACNJ,UAAAA,KAAK,EAAE;AADD,SAAR;AAGD,OAXW,CAaZ;;;AACA,WAAKC,WAAL,CAAiBG,KAAjB;AAED;;;6BAEQ;AAAA;;AACP;AACA,UAAIC,OAAO,GAAG,mBAAM;AACJ,YAAIC,aAAa,GAAG,MAAI,CAACN,KAAL,KAAe,MAAf,GACA,OADA,GAEA,MAFpB;AAGA,YAAIK,OAAO,GAAG;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAG,UAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACY;AAAM,UAAA,SAAS,EAAGC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACYA,aADZ,MADZ,UADA,CAAd;AAMA,eAAQD,OAAR;AACD,OAXf;;AAaA,UAAIE,YAAY,GAAG,KAAKP,KAAL,KAAe,MAAf,GACD;AAAQ,QAAA,OAAO,EAAG,KAAKQ,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIJ,OAAO,EADX,EAEE;AAAG,QAAA,SAAS,EAAC,aAAb;AAA2B,uBAAY,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADC,GAMD;AAAQ,QAAA,OAAO,EAAG,KAAKG,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIJ,OAAO,EADX,EAEE;AAAG,QAAA,SAAS,EAAC,cAAb;AAA4B,uBAAY,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CANlB;AAUA,aACE;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGE,YADH,CADF;AAKD;;;;EAxDyBV,S;;AA4D5B,eAAeC,aAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass ThemeSwitcher extends Component {\n  constructor(props) {\n    super(props);\n    this.theme = this.props.theme;\n    this.updateTheme = this.props.refresh;\n\n  }\n\n  switchTheme() {\n    let currTheme = this.theme;\n    let state;\n    if (currTheme === 'dark') {\n      state = {\n        theme: 'light',\n      };\n    } else {\n      state = {\n        theme: 'dark',\n      };\n    }\n\n    // UPDATE CURRENT STATE OF APP TO OPPOSITE THEME\n    this.updateTheme(state);\n\n  }\n\n  render() {\n    // CREATES TOOL TIP TO TELL USERS WHICH THEME THEY WILL BE SWITCHING TO\n    let toolTip = () => {\n                    let oppositeTheme = this.theme === 'dark' ?\n                                        'light' :\n                                        'dark';\n                    let toolTip = <div className=\"tool-tip\">\n                                  <p className=\"class-message\">\n                                    Switch to <span className= {oppositeTheme}>\n                                                        { oppositeTheme } </span>\n                                     theme</p>\n                                </div>;\n                    return (toolTip);\n                  };\n\n    let switchButton = this.theme === 'dark' ?\n                      <button onClick ={this.switchTheme.bind(this)}>\n                        { toolTip() }\n                        <i className=\"fa fa-sun-o\" aria-hidden=\"true\"></i>\n                      </button>\n                      :\n                      <button onClick ={this.switchTheme.bind(this)}>\n                        { toolTip() }\n                        <i className=\"fa fa-moon-o\" aria-hidden=\"true\"></i>\n                      </button>;\n    return (\n      <div id=\"switch\">\n        {switchButton}\n      </div>\n    );\n  }\n\n}\n\nexport default ThemeSwitcher;\n"]},"metadata":{},"sourceType":"module"}